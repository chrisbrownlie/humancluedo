devtools::load_all(".")
generate_game_name()
generate_game_name()
generate_game_name(23)
generate_game_name(8)
?modalDialog
test_state <- GameState$new()
test_contracts <- tibble::tibble(
player = c("bob", "dave", "sandra"),
item = c("a spoon", "a ball", "a pair of trousers"),
target = c("sandra", "bob", "dave")
)
test_state$create_game(
test_contracts
)
test_state$create_game(
test_contracts,
admin_player = "bob"
)
DBI::dbRemoveTable(db_conn(), "players")
test_state$create_game(
test_contracts,
admin_player = "bob"
)
create_data
create_database()
test_state$create_game(
test_contracts,
admin_player = "bob"
)
?modalButton
DBI::dbRemoveTable(db_conn(), "players")
devtools::load_all(".")
create_database()
stringr::str_flatten_comma(LETTERS)
?str_flatten_comma
stringr::str_flatten_comma(1:2)
stringr::str_flatten_comma(1:2, last = "and")
stringr::str_flatten_comma(1:2, last = " and ")
stringr::str_flatten_comma(1:5, last = " and ")
?set_cookie
?glue_sql
test_game_id
test_state <- GameState$new()
test_contracts <- tibble::tibble(
player = c("bob", "dave", "sandra"),
item = c("a spoon", "a ball", "a pair of trousers"),
target = c("sandra", "bob", "dave")
)
test_state$create_game(
test_contracts,
admin_player = "bob"
)
devtools::load_all(".")
l()
devtools::load_all(".")
l()
create_database()
new_game <- GameState$new()
new_game$initialise_game("56d6b01c-ff8e-41bf-90d5-bd7b843d3d92")
new_game$players
devtools::load_all(".")
l()
game_id
game_state$initialise_game(game_id)
game_id
game_state
game_state$is_initialised()
game_state$conn
game_state$initialise_game(game_id = game_id)
DBI::dbListTables(game_state$conn)
devtools::load_all(".")
create_database()
db_conn()
DBI::dbConnect(duckdb::duckdb(),
dbdir = pkg_file("inst", "hc-db.duckdb"))
DBI::dbConnect(duckdb::duckdb(),
dbdir = "inst/hc-db.duckdb")
DBI::dbConnect(duckdb::duckdb(),
dbdir = pkg_file("inst", "hc-db.duckdb"))
create_database()
devtools::load_all(".")
l()
game_state$initialise_game(game_id)
test_state <- GameState$new()
test_contracts <- tibble::tibble(
player = c("bob", "dave", "sandra"),
item = c("a spoon", "a ball", "a pair of trousers"),
target = c("sandra", "bob", "dave")
)
test_state$create_game(
test_contracts,
admin_player = "bob"
)
devtools::load_all(".")
l()
game_state$initialise_game(game_id)
print("game initialised")
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
pak::pkg_install("shinyjs")
?insertUI
devtools::load_all(".")
l()
players <- DBI::dbReadTable(db_conn(), "players")
View(players)
DBI::dbRemoveTable(db_conn(), "players")
create_database()
test_state <- GameState$new()
test_contracts <- tibble::tibble(
player = c("bob", "dave", "sandra"),
item = c("a spoon", "a ball", "a pair of trousers"),
target = c("sandra", "bob", "dave")
)
test_state$create_game(
test_contracts,
admin_player = "bob"
)
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
devtools::load_all(".")
l()
devtools::load_all(".")
l()
?cookies
devtools::load_all(".")
l()
DBI::dbRemoveTable(db_conn(), "players")
DBI::dbRemoveTable(db_conn(), "games")
DBI::dbRemoveTable(db_conn(), "contracts")
devtools::load_all(".")
create_database()
test_state <- GameState$new()
test_contracts <- tibble::tibble(
player = c("bob", "dave", "sandra"),
item = c("a spoon", "a ball", "a pair of trousers"),
target = c("sandra", "bob", "dave")
)
test_state$create_game(
test_contracts,
admin_player = "bob"
)
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
players <- DBI::dbReadTable(db_conn(), "players")
View(players)
devtools::load_all(".")
l()
View(players)
game_state$active_player
game_state$set_player(
cookies::get_cookie(cookie_name = "player_id",
missing = NULL)
)
game_state$active_player
devtools::load_all(".")
l()
devtools::load_all(".")
l()
?observe
devtools::load_all(".")
l()
devtools::load_all(".")
DBI::dbRemoveTable(db_conn(), "players")
DBI::dbRemoveTable(db_conn(), "contracts")
DBI::dbRemoveTable(db_conn(), "games")
devtools::load_all(".")
test_state <- GameState$new()
test_contracts <- tibble::tibble(
player = c("bob", "dave", "sandra"),
item = c("a spoon", "a ball", "a pair of trousers"),
location = c("in the kitchen", "by the pool", "behind the shed"),
target = c("sandra", "bob", "dave")
)
test_state$create_game(
test_contracts,
admin_player = "bob"
)
create_database()
test_state$create_game(
test_contracts,
admin_player = "bob"
)
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
game_state$get_item()
game_state$active_player
game_state$active_player_name
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
game_state$active_player
game_state$active_player_name
game_state$get_target()
game_state$get_item()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
?insertUI
devtools::load_all(".")
l()
?toggle
?toggleState
?rows_update
lubridate::now()
?rows_insert
devtools::load_all(".")
l()
devtools::load_all(".")
l()
players <- DBI::dbReadTable(db_conn(), "players")
View(players)
contracts <- DBI::dbReadTable(db_conn(), "contracts")
View(contracts)
DBI::dbRemoveTable(db_conn(), "players")
DBI::dbRemoveTable(db_conn(), "games")
DBI::dbRemoveTable(db_conn(), "contracts")
create_database()
test_state <- GameState$new()
test_contracts <- tibble::tibble(
player = c("bob", "dave", "sandra"),
item = c("a spoon", "a ball", "a pair of trousers"),
location = c("in the kitchen", "by the pool", "behind the shed"),
target = c("sandra", "bob", "dave")
)
test_state$create_game(
test_contracts,
admin_player = "bob"
)
devtools::load_all(".")
l()
devtools::load_all(".")
clean_game()
devtools::load_all(".")
clean_game()
devtools::load_all(".")
devtools::load_all(".")
l()
length(game_state$active_player_name) == 0
players <- collect(game_state$players)
devtools::load_all(".")
l()
clean_game()
devtools::load_all(".")
l()
devtools::load_all(".")
clean_game()
l()
devtools::load_all(".")
l()
clean_game()
devtools::load_all(".")
l()
session$token
cookies::get_cookie("player_id")
game_state$players
game_state$active_player
game_state$set_player(session$token)
game_state$active_player
game_state$players
DBI::dbExecute(
game_state$conn,
glue::glue_sql(
"
UPDATE players
SET identifier = {session$token}
WHERE player = {input$selected_player}
AND game_id = {game_state$active_game}
",
.con = game_state$conn
)
)
# Refresh tables
game_state$initialise_game(game_state$active_game)
game_state$players
game_state$active_player
game_state$get_target()
game_state$contracts
game_state$active_player_name
devtools::load_all(".")
l()
clean_game()
devtools::load_all(".")
l()
# Mark player as dead
DBI::dbExecute(
self$conn,
glue::glue_sql(
"
UPDATE players
SET alive = {FALSE}
WHERE player = {self$get_target()}
AND game_id = {self$active_game}
",
.con = self$conn
)
)
cli::cli_alert_success("Player {self$get_target()} identified as dead")
self$get_target()
self$get_target()
# Mark contract as complete
DBI::dbExecute(
self$conn,
glue::glue_sql(
"
UPDATE contracts
SET active = {FALSE}, execution_time = {lubridate::now()}, execution_notes = {notes}
WHERE target = {self$get_target()}
AND game_id = {self$active_game}
",
.con = self$conn
)
)
cli::cli_alert_success("Contract on {self$get_target()} identified as complete")
self$get_target()
self$contracts
self$players
# Add new contract
target_contract <- self$contracts |>
filter(player == self$get_target(),
active)
target_contract
devtools::load_all(".")
l()
clean_game()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
clean_game()
devtools::load_all(".")
l()
if (NROW(target_contract) != 1) cli::cli_abort("Something went wrong adding new contract")
devtools::load_all(".")
l()
p <- DBI::dbReadTable(db_conn(), "players")
c <- DBI::dbReadTable(db_conn(), "contracts")
View(contracts)
devtools::load_all(".")
clean_game()
l()
NROW(target_contract)
target_contract
self$contracts
target
self$contracts |>
filter(player == target,
active)
self$contracts
self$contracts |>
filter(player == .env$target,
active)
# Get target's contract
target_contract <- self$contracts |>
filter(player == .env$target,
active)
NROW(target_contract)
nrow(target_contract)
duckdb::dbGetRowCount(target_contract)
duckplyr::count(target_contract)
duckplyr::count(target_contract)$n
pull(duckplyr::count(target_contract))
pull(count(target_contract))
pull(target_contract, target)
self$active_player_name
clean_game()
devtools::load_all(".")
l()
clean_game()
devtools::load_all(".")
clean_game()
devtools::load_all(".")
l()
?write_clip
clipr::write_clip("This")
clipr::write_clip(test_state$active_game)
clipr::write_clip(test_state$active_game, return_new = TRUE)
clipr::write_clip(cat(test_state$active_game))
test_state$active_game
new <- GameState$new()
test_contracts <- tibble::tibble(
player = c("bob", "dave", "sandra"),
item = c("a spoon", "a ball", "a pair of trousers"),
location = c("in the kitchen", "by the pool", "behind the shed"),
target = c("sandra", "bob", "dave")
)
new$create_game(
test_contracts,
admin_player = "bob"
)
new$active_game
devtools::load_all(".")
clean_game()
devtools::load_all(".")
l()
?insertUI
format(lubridate::now())
format(lubridate::now(), "%Z")
format(lubridate::now(), "%z")
format(lubridate::now(), "%r")
format(lubridate::now(), "%R")
?format.Date
?strptime
format(lubridate::now(), "%D")
format(lubridate::now() "%d-%m-%Y")
format(lubridate::now(), "%d-%m-%Y")
devtools::load_all(".")
devtools::load_all(".")
l()
devtools::load_all(".")
l()
pull(count(kills))
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
clean_game()
devtools::load_all(".")
l9
l()
devtools::load_all(".")
l()
clean_game()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
clean_game()
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
html <- tagList(
p(
"You are",
tags$b(ifelse(is_alive, "ALIVE", "DEAD"))
),
p(
"You",
ifelse(is_alive, "have", "had"),
tags$b(NROW(kills), "successful kills")
),
if (NROW(kills)) {
tags$ul(
purrr::pmap(kills,
\(...) {
kill <- list(...)
tags$li(
"Killed", tags$b(kill$target), "with", tags$b(kill$item), "-", tags$b(kill$location), " at ",
format(kill$execution_time, "%R"), "on", format(kill$execution_time, "%d-%m-%Y")
)
})
)
}
)
html
kills
self$active_player_name
devtools::load_all(".")
l()
clean_game()
l()
?card_title
devtools::load_all(".")
l()
?page_fillable
devtools::load_all(".")
l()
devtools::load_all(".")
l()
?hide
devtools::load_all(".")
l()
