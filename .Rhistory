} else if (index == 2) {
list(background = "rgba(192, 192, 192, 1)")
} else if (index == 3) {
list(background = "rgba(205, 127, 50, 1)")
}
},
columns = list(
position = reactable::colDef(
name = "Pos"
),
player = reactable::colDef(
name = "Player"
),
kills = reactable::colDef(
name = "Kills"
),
indirect_kills = reactable::colDef(
name = "Kills (indirect)"
),
alive = reactable::colDef(
name = "Status",
html = TRUE,
cell = function(value) {
if (value == 1) {
"&#128154;"
} else {
"&#128128"
}
}
),
time_survived = reactable::colDef(
name = "Time Survived"
)
)
)
player_order |>
transmute(
position,
player,
kills = n,
indirect_kills = n_indirect,
alive,
time_survived = if_else(
is.na(execution_time),
"",
lubridate::as.duration(execution_time-start_time) |>
stringr::str_extract(pattern = "(?<=\\(~).*(?=\\))")
)
) |>
arrange(position) |>
reactable::reactable(
style = list(backgroundColor = "rgba(255, 255, 255, 0.4)"),
pagination = FALSE,
width = "100%",
rowStyle = function(index) {
if (index == 1) {
list(background = "rgba(255, 215, 0, 1)")
} else if (index == 2) {
list(background = "rgba(192, 192, 192, 1)")
} else if (index == 3) {
list(background = "rgba(205, 127, 50, 1)")
}
},
columns = list(
position = reactable::colDef(
name = "Pos"
),
player = reactable::colDef(
name = "Player"
),
kills = reactable::colDef(
name = "Kills"
),
indirect_kills = reactable::colDef(
name = "Kills (indirect)"
),
alive = reactable::colDef(
name = "Status",
html = TRUE,
cell = function(value) {
if (value == 1) {
"&#128154;"
} else {
"&#128128"
}
}
),
time_survived = reactable::colDef(
name = "Time Survived"
)
)
)
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
install.packages("shinyDateTimePickers")
install.packages("shinyDatetimePickers")
devtools::load_all(".")
lubridate::now() + days(3)
lubridate::now() + lubridate::days(3
)
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
?dateTimeMaterialPickerInput
??dateTimeMaterialPickerInput
devtools::load_all(".")
l()
devtools::load_all(".")
l()
player_vec
input$name
input$game_deadline
game_state$create_game(players = player_vec,
game_name = input$name,
deadline = input$game_deadline,
win_condition = input$win_condition,
obj_pop_method = input$obj_pop_method)
game_state$details
# Auto generate
items <- generate_items(n = length(player_vec))
for (item in items) game_state$add_item(item, generated_by = "admin")
locations <- generate_locations(n = length(player_vec))
for (location in locations) game_state$add_location(location, generated_by = "admin")
game_state$set_contracts()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
state <- GameState$new(game_id = "YjwSXKPE")
completed_contracts <- state$contracts |>
filter(!is.na(execution_time)) |>
collect() |>
mutate(
execution_time = lubridate::ymd_hms(execution_time),
execution_order = min_rank(execution_time)
)
death_order <- select(completed_contracts, target,execution_time, execution_order)
kills <- count(completed_contracts, player) |>
mutate(n = if_else(is.na(n), 0, n))
indirect_kills <- completed_contracts |>
left_join(kills,
by = c("target" = "player")) |>
group_by(player) |>
summarise(n = sum(n)) |>
mutate(n = if_else(is.na(n), 0, n))
players <- state$players |>
collect() |>
left_join(death_order,
by = c("player" = "target")) |>
left_join(kills,
by = c("player")) |>
left_join(indirect_kills,
by = c("player"),
suffix = c("", "_indirect")) |>
mutate(
execution_order = coalesce(execution_order, Inf),
n = coalesce(n, 0),
n_indirect = coalesce(n_indirect, 0)
)
game_type <- pull(state$details, win_condition)
game_type == "duel"
players
player_order <- players |>
mutate(position2 = min_rank(
pick(-execution_order, -n, -n_indirect)
),
position = (max(position)+1)-position
)
player_order <- players |>
mutate(position2 = min_rank(
pick(-execution_order, -n, -n_indirect)
)
)
player_order
players <- state$players |>
collect() |>
left_join(death_order,
by = c("player" = "target")) |>
left_join(kills,
by = c("player")) |>
left_join(indirect_kills,
by = c("player"),
suffix = c("", "_indirect")) |>
mutate(
execution_order = coalesce(execution_order, Inf),
n = coalesce(n, 0),
n_indirect = coalesce(n_indirect, 0),
# Get rank of each metric
across(
c(execution_order, n, n_index),
\(x) min_rank(desc(x))
)
)
players <- state$players |>
collect() |>
left_join(death_order,
by = c("player" = "target")) |>
left_join(kills,
by = c("player")) |>
left_join(indirect_kills,
by = c("player"),
suffix = c("", "_indirect")) |>
mutate(
execution_order = coalesce(execution_order, Inf),
n = coalesce(n, 0),
n_indirect = coalesce(n_indirect, 0),
# Get rank of each metric
across(
c(execution_order, n, n_indirect),
\(x) min_rank(desc(x))
)
)
players
player_order <- players |>
mutate(position = min_rank(
pick(execution_order, n, n_indirect)
)
)
player_order
player_order <- players |>
mutate(position = min_rank(
pick(n, n_indirect, execution_order)
)
)
player_order
players$n[3] <- 20
player_order <- players |>
mutate(position = min_rank(
pick(n, n_indirect, execution_order)
)
)
player_order
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
start <- pull(state$details, started_at)
kills <- state$contracts |>
collect() |>
filter(active == 0, !is.na(execution_time)) |>
arrange(execution_time)
kills
devtools::load_all("~/Documents/r_projects/humancluedo")
l()
devtools::load_all(".")
l()
self$get_target()
# Mark player as dead
dbSendQuery(
self$conn,
glue::glue_sql(
"
UPDATE players
SET alive = {FALSE}
WHERE player = {target}
AND game_id = {self$active_game}
",
.con = self$conn
)
)
target <- self$get_target()
# Mark player as dead
dbSendQuery(
self$conn,
glue::glue_sql(
"
UPDATE players
SET alive = {FALSE}
WHERE player = {target}
AND game_id = {self$active_game}
",
.con = self$conn
)
)
cli::cli_alert_success("Player {target} marked as dead")
# Get target's contract
target_contract <- self$contracts |>
filter(player == .env$target,
active)
target_contract
pull(count((target_contract))) != 1
pull(target_contract, target) == self$active_player_name
target_contract |>
mutate(player = self$active_player_name,
active = TRUE) |>
collect()
devtools::load_all(".")
l()
target <- self$get_target()
target
# Mark player as dead
dbSendQuery(
self$conn,
glue::glue_sql(
"
UPDATE players
SET alive = {FALSE}
WHERE player = {target}
AND game_id = {self$active_game}
",
.con = self$conn
)
)
cli::cli_alert_success("Player {target} marked as dead")
# Get target's contract
target_contract <- self$contracts |>
filter(player == .env$target,
active)
target_contract
target_contract |>
mutate(player = self$active_player_name,
active = TRUE) |>
collect()
# Add to contracts table
target_contract |>
mutate(player = self$active_player_name,
active = TRUE) |>
collect() |>
dbAppendTable(
conn = self$conn,
name = "contracts",
value = _
)
target
self$contracts
self$active_player_name
# Mark both previous contracts as no longer active
dbSendQuery(
self$conn,
glue::glue_sql(
"
UPDATE contracts
SET active = {FALSE}, execution_notes = 'Contract incomplete'
WHERE player = {target} AND target = {self$active_player_name}
AND game_id = {self$active_game}
",
.con = self$conn
)
)
self$contracts
# Mark both previous contracts as no longer active
dbSendQuery(
self$conn,
glue::glue_sql(
"
UPDATE contracts
SET active = {FALSE}, execution_notes = 'Contract incomplete'
WHERE player = {target} AND active = {TRUE}
AND game_id = {self$active_game}
",
.con = self$conn
)
)
self$contracts
devtools::load_all(".")
l()
devtools::load_all(".")
l()
state$get_game_status()
devtools::load_all(".")
state$contracts
state$get_game_status()
state$confirm_kill()
rlang::last_trace()
state$get_target()
state$contracts |>
filter(player == self$active_player_name,
active)
state$active_player_name
devtools::load_all(".")
l()
devtools::load_all(".")
l()
completed_contracts <- state$contracts |>
filter(!is.na(execution_time)) |>
collect() |>
mutate(
execution_time = lubridate::ymd_hms(execution_time),
execution_order = min_rank(execution_time)
)
death_order <- select(completed_contracts, target,execution_time, execution_order)
kills <- count(completed_contracts, player) |>
mutate(n = if_else(is.na(n), 0, n))
indirect_kills <- completed_contracts |>
left_join(kills,
by = c("target" = "player")) |>
group_by(player) |>
summarise(n = sum(n)) |>
mutate(n = if_else(is.na(n), 0, n))
players <- state$players |>
collect() |>
left_join(death_order,
by = c("player" = "target")) |>
left_join(kills,
by = c("player")) |>
left_join(indirect_kills,
by = c("player"),
suffix = c("", "_indirect")) |>
mutate(
execution_order = coalesce(execution_order, Inf),
n = coalesce(n, 0),
n_indirect = coalesce(n_indirect, 0),
# Get rank of each metric
across(
c(execution_order, n, n_indirect),
\(x) min_rank(desc(x)),
.names = "{col}_rank"
)
)
game_type <- pull(state$details, win_condition)
if (game_type == "duel") {
player_order <- players |>
mutate(position = min_rank(
pick(execution_order_rank, n_rank, n_indirect_rank)
)
)
} else {
player_order <- players |>
mutate(position = min_rank(
pick(n_rank, n_indirect_rank, execution_order_rank)
)
)
}
start_time <- pull(state$details, started_at) |>
as.POSIXct()
tbl_data <- player_order |>
transmute(
position = to_ordinal(position),
player,
kills = n,
indirect_kills = n_indirect,
alive,
time_survived = if_else(
is.na(execution_time),
"",
lubridate::as.duration(execution_time-start_time) |>
stringr::str_extract(pattern = "(?<=\\(~).*(?=\\))")
)
) |>
arrange(position)
tbl_data
player_order
state$contracts
devtools::load_all(".")
l()
state <- GameState$new(game_id = "Sxo0KDuI")
state$get_game_status()
devtools::load_all(".")
state <- GameState$new(game_id = "Sxo0KDuI")
state$get_game_status()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
renv::snapshot()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
state <- GameState$new("N2YyBIFz")
state$get_game_status()
state$players
state$players$identifier
sum(is.na(pull(state$players, identifier)))
install.packages("shinydisconnect")
?disconnectMessage
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::document()
renv::snapshot()
