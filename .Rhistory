test$is_initialised()
devtools::load_all(".")
test <- GameState$new()
test$initialise_game("82278745-eecb-4ced-9393-2a99474de907")
test$items
test$add_item("spoon")
test$add_location("in the kitchen")
test$add_location("in the kitchen", "auto")
test$locations
devtools::load_all(".")
test <- GameState$new()
test$initialise_game("82278745-eecb-4ced-9393-2a99474de907")
test$add_item("spoon", "auto")
test$add_item("ball", "auto")
test$add_item("paper", "auto")
test$add_location("in the office", "auto")
test$add_location("in the garden", "auto")
test$items
test$set_contracts()
test$players
test$players |> pull(player)
test$players |> pull(player) |> class()
devtools::load_all(".")
test <- GameState$new()
test$initialise_game("82278745-eecb-4ced-9393-2a99474de907")
test$items
test$set_contracts()
test$contracts
test$contracts
test$players
devtools::load_all(".")
test <- GameState$new()
test$initialise_game("82278745-eecb-4ced-9393-2a99474de907")
test$contracts
test$set_contracts()
test$contracts
test$players
test$locations
test$add_location("something", "auto")
test$locations
test$contracts
devtools::load_all(".")
test <- GameState$new()
test$initialise_game("82278745-eecb-4ced-9393-2a99474de907")
test$locations
test$remove_location("something")
devtools::load_all(".")
test <- GameState$new()
test$initialise_game("82278745-eecb-4ced-9393-2a99474de907")
test$locations
test$remove_location("something")
test$locations
test$set_contracts()
test$contracts
devtools::load_all(".")
test <- GameState$new()
test$initialise_game("82278745-eecb-4ced-9393-2a99474de907")
test$contracts
test$set_contracts()
contracts <- tibble::tibble(
player = players,
item = items,
location = locations,
target = targets
)
contracts
contracts |>
mutate(game_id = new_game_id,
active = TRUE)
self$contracts
contracts |>
mutate(game_id = new_game_id,
active = TRUE) |>
duckdb::dbAppendTable(conn = self$conn,
name = "contracts",
value = _)
self$contracts
tbl(self$conn, "contracts")
dplyr::tbl(self$conn, "contracts")
rm(new_game_id)
duckdb::dbRemoveTable(db_conn(), "contracts")
create_database()
devtools::load_all(".")
test <- GameState$new()
test$initialise_game("82278745-eecb-4ced-9393-2a99474de907")
test$players
test$items
test$contracts
test$set_contracts()
test$contracts
test$active_player
test$set_player("chris")
test$get_location()
test$active_player
test$active_player_name
test$players
test$details
test$contracts
test$set_contracts()
test$contracts
test$contracts |> NROW()
test$contracts |> duckplyr::count()
test$contracts |> duckplyr::count() |> pull(n)
count(test$contracts)
tally(test$contracts)
?tally
tally(test$contracts)$n
devtools::load_all(".")
test <- GameState$new()
test$initialise_game("82278745-eecb-4ced-9393-2a99474de907")
test$contracts
test$set_contracts()
test$contracts
test$confirm_kill()
?radioButtons
??radioButtons
?toggle
sample(c("this", "that"), 10)
sample(c("this", "that"), 10, replace = TRUE)
sample(LETTERS, 3, replace = TRUE)
sample(LETTERS, 3, replace = TRUE)
sample(LETTERS, 3, replace = TRUE)
sample(LETTERS, 3, replace = TRUE)
sample(LETTERS, 3, replace = TRUE)
sample(LETTERS, 3, replace = TRUE)
sample(LETTERS, 3, replace = TRUE)
sample(LETTERS[1:4], 3, replace = TRUE)
sample(LETTERS[1:4], 3, replace = TRUE)
sample(LETTERS[1:4], 3, replace = TRUE)
sample(LETTERS[1:4], 3, replace = TRUE)
pkg_file("hc-db.duckdb")
devtools::load_all(".")
devtools::load_all(".")
pkg_file("hc-db.duckdb")
devtools::load_all(".")
l()
devtools::load_all(".")
l()
pkg_file("hc-db.duckdb")
create_database()
db_conn()
devtools::load_all(".")
db_conn()
fs::file_create("inst/hc-db.duckdb")
db_conn()
devtools::load_all(".")
db_conn()
devtools::load_all(".")
db_conn()
devtools::load_all(".")
l()
?req
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
duckplyr::fallback_review()
duckplyr::fallback_sitrep()
devtools::load_all(".")
l()
devtools::load_all(".")
l9
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
?insertUI
devtools::load_all(".")
l()
dplyr::tbl(db_conn(), "games") -> games
duckdb::dbListTables(db_conn())
?duckdb::dbConnect
??duckdb::dbConnect()
duckdb::dbConnect()
duckdb::dbConnec
duckdb::dbConnect
?dbConnect
system.file("hc-db.duckdb", package = "humancluedo")
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
dplyr::tbl(db_conn(), "players") -> ps
dplyr::tbl(db_conn(), "games") -> ps
db_conn()
devtools::load_all(".")
l()
tags$ul(
lapply(
seq_along(players$player),
\(i) {
tags$li(
players$player[i], ifelse(is.na(players$id[i]), "(yet to join)", "(joined)"),
class = ifelse(is.na(players$id[i]), "text-red", "text-green")
)
}
)
)
players$identifier
lapply(
seq_along(players$player),
\(i) {
tags$li(
players$player[i], if_else(is.na(players$identifier[i]), "(yet to join)", "(joined)"),
class = if_else(is.na(players$identifier[i]), "text-red", "text-green")
)
}
)
lapply(
seq_along(players$player),
\(i) {
tags$li(
paste(players$player[i], if_else(is.na(players$identifier[i]), "(yet to join)", "(joined)")),
class = if_else(is.na(players$identifier[i]), "text-red", "text-green")
)
}
)
NROW(iris) |> as.logical
NROW(iris) |> as.logical()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
game_state
game_state$active_player
game_state$active_player_name
game_state$active_game_name
game_state$players
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
dplyr::tbl(db_conn(), "contracts") -> cc
cc
test <- GameState$new(game_id = "04951be3-f9ff-4b70-85fc-4c3e7909dafe")
test$contracts
test$set_contracts()
test$contracts
test$items
test$locations
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
dplyr::tbl(db_conn(), "players") -> ptf
ptf
collect(ptf) -> ptfc
View(ptfc)
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
players$player[players$identifier != state$active_player]
players
players$player
state$active_player
players$identifier
purrr::map2(
players$player[players$player != state$active_player_name],
players$identifier[players$player != state$active_player_name],
\(name, id) {
tags$li(
p(name, if_else(is.na(id), "(yet to join)", "(joined)")),
class = if_else(is.na(id), "text-red", "text-green")
)
}
)
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::document()
devtools::document()
devtools::load_all(".")
devtools::document()
devtools::load_all(".")
devtools::document()
devtools::check()
devtools::load_all(".")
l()
file.info(".Rproj.user")
file.info("inst")
?file.info
install.packages("fs")
fs::dir_info("inst")
?dir_info
fs::dir_info("inst", recurse = TRUE)
fs::dir_info(".Rproj.user", recurse = TRUE)
fs::dir_info(".Rproj.user", recurse = TRUE)
renv::status()
renv::snapshot()
install.packages("devtools")
devtools::load_all()
renv::status()
renv::snapshot()
devtools::load_all()
l()
devtools::load_all()
l()
renv::status()
install.packages("stringr")
renv::restore()
devtools::load_all(".")
l()
renv::status()
renv::restore(clean = TRUE)
renv::restore(clean = TRUE, repos = c("CRAN" = "https://packagemanager.posit.co/cran/__linux__/focal/latest"))
renv::status()
devtools::load_all(".")
l()
packageVersion("stringr")
renv::status()
renv::restore(repos = c("CRAN" = "https://packagemanager.posit.co/cran/__linux__/focal/latest"))
renv::restore(repos = c("CRAN" = "https://packagemanager.posit.co/cran/__linux__/focal/latest"), clean = TRUE, rebuild = TRUE)
?restore
devtools::load_all(".")
install.packages("RSQLite")
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::document()
devtools::load_all(".")
l()
c <- db_conn()
c@dbname
c@ref
c@vfs
c@ptr
c@loadable.extensions
c@flags
dbListTables(c)
?dbConnect
devtools::load_all(".")
l()
devtools::document()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
performance
performance$is_alive
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
self$is_alive()
self$is_initialised()
self$players |>
filter(player == self$active_player_name) |>
pull(alive) |>
as.logical() |>
isTRUE()
rlang::is_true(1)
shiny::isTruthy(1)
devtools::load_all(".")
l()
renv::snapshot()
install.packages("dockerfiler")
new <- dockerfiler::dock_from_renv()
new$write()
renv::status()
devtools::load_all(".")
l()
p <- tbl(db_conn(), "players")
p
p <- tbl(db_conn(), "players")
p
p
devtools::load_all(".")
l()
items <- tbl(db_conn(), "items")
locations <- tbl(db_conn(), "locations")
items
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
kills
tags$ul(
purrr::pmap(kills,
\(...) {
kill <- list(...)
tags$li(
"Killed", tags$b(kill$target), "with", tags$b(kill$item), "-", tags$b(kill$location), " at ",
format(kill$execution_time, format = "%R"), "on", format(kill$execution_time, format = "%d-%m-%Y")
)
})
)
devtools::load_all(".")
l()
devtools::load_all(".")
l()
format(Sys.time(), "%R %Z")
format(Sys.time(), "%R %p")
format(Sys.time(), "%R%p")
format(Sys.time(), "%r%p")
format(Sys.time(), "%r")
lubridate::today()-(lubridate::today()-lubridate::days(1))
lubridate::today()-(lubridate::today()-lubridate::days(1)) == 1
lubridate::today()-(lubridate::today()-lubridate::days(1)) == -1
format(lubridate::today(), "%D")
format(lubridate::today(), "%d")
format(lubridate::today(), "%n")
format(lubridate::today(), "%m")
format(lubridate::today(), "%w")
?stripf
?strpf
?strf
?strft
?strftime
format(lubridate::today(), "%e")
format(lubridate::today(), "%x")
format(lubridate::today(), "%a %R")
format(lubridate::today(), "%A %e")
format(lubridate::today(), "%A%e %b %Y")
devtools::load_all(".")
l()
format(lubridate::today(), format="%A%e %b %Y!")
getQueryString
getUrlHash()
getUrlHash
?uuid::UUIDgenerate()
install.packages("sqids")
devtools::install_github("sqids/sqids-r")
?encode
sqids::encode(Sys.time())
sqids::encode(Sys.time(), options = sqids::sqids_options())
sqids::encode(as.numeric(Sys.time()), options = sqids::sqids_options())
sqids::encode(as.numeric(Sys.time()), options = sqids::sqids_options())
sqids::encode(as.numeric(Sys.time()), options = sqids::sqids_options())
sqids::encode(as.numeric(Sys.time()), options = sqids::sqids_options())
sqids::encode(as.numeric(Sys.time()), options = sqids::sqids_options())
as.numeric(lubridate::now())
as.numeric(lubridate::now())
as.numeric(lubridate::now())
as.numeric(Sys.time())
as.numeric(Sys.time())
install.packages("microbenchmark")
microbenchmark::microbenchmark(lbr = lubridate::now(), base = Sys.time())
as.numeric(Sys.time()+runif(1,1000000,1))
as.numeric(Sys.time())+runif(1,1000000,1))
as.numeric(Sys.time())+runif(1,1000000,1)
runif(1,1000000,1)
runif(1,1000000)
runif(1,100)
runif(1,1,1000000)
runif(1,1,1000000)
sqids::encode(as.numeric(Sys.time()) + runif(1,1,1000000))
sqids::encode(as.numeric(Sys.time()) + runif(1,1,1000000), options=sqids::sqids_options())
sqids::encode(as.numeric(Sys.time()) + runif(1,1,1000000), options=sqids::sqids_options())
sqids::encode(as.numeric(Sys.time()) + runif(1,1,1000000), options=sqids::sqids_options())
sqids::encode(as.numeric(Sys.time()) + runif(1,1,1000000), options=sqids::sqids_options())
?sqids_options
sqids::encode(as.numeric(Sys.time()) + runif(1,1,1000000), options=sqids::sqids_options(min_length = 8))
sqids::encode(as.numeric(Sys.time()) + runif(1,1,1000000), options=sqids::sqids_options(min_length = 8))
devtools::load_all(".")
l()
renv::snapshot()
