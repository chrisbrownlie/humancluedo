dplyr::tbl(db_conn(), "players") -> ps
dplyr::tbl(db_conn(), "games") -> ps
db_conn()
devtools::load_all(".")
l()
tags$ul(
lapply(
seq_along(players$player),
\(i) {
tags$li(
players$player[i], ifelse(is.na(players$id[i]), "(yet to join)", "(joined)"),
class = ifelse(is.na(players$id[i]), "text-red", "text-green")
)
}
)
)
players$identifier
lapply(
seq_along(players$player),
\(i) {
tags$li(
players$player[i], if_else(is.na(players$identifier[i]), "(yet to join)", "(joined)"),
class = if_else(is.na(players$identifier[i]), "text-red", "text-green")
)
}
)
lapply(
seq_along(players$player),
\(i) {
tags$li(
paste(players$player[i], if_else(is.na(players$identifier[i]), "(yet to join)", "(joined)")),
class = if_else(is.na(players$identifier[i]), "text-red", "text-green")
)
}
)
NROW(iris) |> as.logical
NROW(iris) |> as.logical()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
game_state
game_state$active_player
game_state$active_player_name
game_state$active_game_name
game_state$players
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
dplyr::tbl(db_conn(), "contracts") -> cc
cc
test <- GameState$new(game_id = "04951be3-f9ff-4b70-85fc-4c3e7909dafe")
test$contracts
test$set_contracts()
test$contracts
test$items
test$locations
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
dplyr::tbl(db_conn(), "players") -> ptf
ptf
collect(ptf) -> ptfc
View(ptfc)
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
players$player[players$identifier != state$active_player]
players
players$player
state$active_player
players$identifier
purrr::map2(
players$player[players$player != state$active_player_name],
players$identifier[players$player != state$active_player_name],
\(name, id) {
tags$li(
p(name, if_else(is.na(id), "(yet to join)", "(joined)")),
class = if_else(is.na(id), "text-red", "text-green")
)
}
)
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::document()
devtools::document()
devtools::load_all(".")
devtools::document()
devtools::load_all(".")
devtools::document()
devtools::check()
devtools::load_all(".")
l()
file.info(".Rproj.user")
file.info("inst")
?file.info
install.packages("fs")
fs::dir_info("inst")
?dir_info
fs::dir_info("inst", recurse = TRUE)
fs::dir_info(".Rproj.user", recurse = TRUE)
fs::dir_info(".Rproj.user", recurse = TRUE)
renv::status()
renv::snapshot()
install.packages("devtools")
devtools::load_all()
renv::status()
renv::snapshot()
devtools::load_all()
l()
devtools::load_all()
l()
renv::status()
install.packages("stringr")
renv::restore()
devtools::load_all(".")
l()
renv::status()
renv::restore(clean = TRUE)
renv::restore(clean = TRUE, repos = c("CRAN" = "https://packagemanager.posit.co/cran/__linux__/focal/latest"))
renv::status()
devtools::load_all(".")
l()
packageVersion("stringr")
renv::status()
renv::restore(repos = c("CRAN" = "https://packagemanager.posit.co/cran/__linux__/focal/latest"))
renv::restore(repos = c("CRAN" = "https://packagemanager.posit.co/cran/__linux__/focal/latest"), clean = TRUE, rebuild = TRUE)
?restore
devtools::load_all(".")
install.packages("RSQLite")
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::document()
devtools::load_all(".")
l()
c <- db_conn()
c@dbname
c@ref
c@vfs
c@ptr
c@loadable.extensions
c@flags
dbListTables(c)
?dbConnect
devtools::load_all(".")
l()
devtools::document()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
performance
performance$is_alive
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
self$is_alive()
self$is_initialised()
self$players |>
filter(player == self$active_player_name) |>
pull(alive) |>
as.logical() |>
isTRUE()
rlang::is_true(1)
shiny::isTruthy(1)
devtools::load_all(".")
l()
renv::snapshot()
install.packages("dockerfiler")
new <- dockerfiler::dock_from_renv()
new$write()
renv::status()
devtools::load_all(".")
l()
p <- tbl(db_conn(), "players")
p
p <- tbl(db_conn(), "players")
p
p
devtools::load_all(".")
l()
items <- tbl(db_conn(), "items")
locations <- tbl(db_conn(), "locations")
items
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
kills
tags$ul(
purrr::pmap(kills,
\(...) {
kill <- list(...)
tags$li(
"Killed", tags$b(kill$target), "with", tags$b(kill$item), "-", tags$b(kill$location), " at ",
format(kill$execution_time, format = "%R"), "on", format(kill$execution_time, format = "%d-%m-%Y")
)
})
)
devtools::load_all(".")
l()
devtools::load_all(".")
l()
format(Sys.time(), "%R %Z")
format(Sys.time(), "%R %p")
format(Sys.time(), "%R%p")
format(Sys.time(), "%r%p")
format(Sys.time(), "%r")
lubridate::today()-(lubridate::today()-lubridate::days(1))
lubridate::today()-(lubridate::today()-lubridate::days(1)) == 1
lubridate::today()-(lubridate::today()-lubridate::days(1)) == -1
format(lubridate::today(), "%D")
format(lubridate::today(), "%d")
format(lubridate::today(), "%n")
format(lubridate::today(), "%m")
format(lubridate::today(), "%w")
?stripf
?strpf
?strf
?strft
?strftime
format(lubridate::today(), "%e")
format(lubridate::today(), "%x")
format(lubridate::today(), "%a %R")
format(lubridate::today(), "%A %e")
format(lubridate::today(), "%A%e %b %Y")
devtools::load_all(".")
l()
format(lubridate::today(), format="%A%e %b %Y!")
getQueryString
getUrlHash()
getUrlHash
?uuid::UUIDgenerate()
install.packages("sqids")
devtools::install_github("sqids/sqids-r")
?encode
sqids::encode(Sys.time())
sqids::encode(Sys.time(), options = sqids::sqids_options())
sqids::encode(as.numeric(Sys.time()), options = sqids::sqids_options())
sqids::encode(as.numeric(Sys.time()), options = sqids::sqids_options())
sqids::encode(as.numeric(Sys.time()), options = sqids::sqids_options())
sqids::encode(as.numeric(Sys.time()), options = sqids::sqids_options())
sqids::encode(as.numeric(Sys.time()), options = sqids::sqids_options())
as.numeric(lubridate::now())
as.numeric(lubridate::now())
as.numeric(lubridate::now())
as.numeric(Sys.time())
as.numeric(Sys.time())
install.packages("microbenchmark")
microbenchmark::microbenchmark(lbr = lubridate::now(), base = Sys.time())
as.numeric(Sys.time()+runif(1,1000000,1))
as.numeric(Sys.time())+runif(1,1000000,1))
as.numeric(Sys.time())+runif(1,1000000,1)
runif(1,1000000,1)
runif(1,1000000)
runif(1,100)
runif(1,1,1000000)
runif(1,1,1000000)
sqids::encode(as.numeric(Sys.time()) + runif(1,1,1000000))
sqids::encode(as.numeric(Sys.time()) + runif(1,1,1000000), options=sqids::sqids_options())
sqids::encode(as.numeric(Sys.time()) + runif(1,1,1000000), options=sqids::sqids_options())
sqids::encode(as.numeric(Sys.time()) + runif(1,1,1000000), options=sqids::sqids_options())
sqids::encode(as.numeric(Sys.time()) + runif(1,1,1000000), options=sqids::sqids_options())
?sqids_options
sqids::encode(as.numeric(Sys.time()) + runif(1,1,1000000), options=sqids::sqids_options(min_length = 8))
sqids::encode(as.numeric(Sys.time()) + runif(1,1,1000000), options=sqids::sqids_options(min_length = 8))
devtools::load_all(".")
l()
renv::snapshot()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
devtools::load_all(".")
l()
self$players |>
filter(player == !!self$get_target()) |>
pull(alive) |>
isTruthy()
self$get_target()
devtools::load_all(".")
l()
devtools::load_all(".")
devtools::load_all(".")
l9
l()
devtools::load_all(".")
l()
!self$is_alive()
self$is_contracted()
self$contracts
NROW(self$contracts)
tally(self$contracts)$n
pull(tally(self$contracts), n)
pull(tally(self$contracts), n) > 0
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
self$players
self$conn |>
dplyr::tbl("players") |>
filter(.data$game_id == .env$game_id)
self$conn |>
dplyr::tbl("players") |>
filter(.data$game_id == !!self$active_game)
devtools::load_all(".")
l()
devtools::load_all(".")
l()
Sys.getenv("PRODUCTION")
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
?bslib::bs_theme
?font_google
devtools::load_all(".")
l()
?card_title
devtools::load_all(".")
l()
devtools::load_all(".")
l()
?page_fillabel
?page_fillable
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l9
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
?page_fillable
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
?modalDialog
devtools::load_all(".")
install.packages("shinymobile")
install.packages("shinyMobile")
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
iris |>
mutate(.d1 = Sepal.Length + Sepal.Width)
library(dplyr)
iris |>
mutate(.d1 = Sepal.Length + Sepal.Width)
iris |>
mutate(.d = Sepal.Length + Sepal.Width)
iris |>
mutate(.e = Petal.Width + Petal.Length,
.d = Sepal.Length + Sepal.Width)
iris |>
mutate(.a = Sepal.Width * 2,
.b = Sepal.Width * 3,
.c = Sepal.Width * 4,
.d = Sepal.Width * 5)
iris |>
mutate(.a = Sepal.Width * 2,
.b = Sepal.Width * 3,
.c = Sepal.Width * 4)
install.packages("yesno")
yesno::yesno()
yesno::yesno()
yesno::yesno()
yesno::yesno()
yesno::yesno2()
yesno::yesno2()
install.packages("statquotes")
install.packages("reprex")
reprex::reprex()
reprex::reprex()
yesno()
library(yesno)
yesno()
yesno2()
sum(grepl("^r|r$", db[,1], ignore.case=TRUE)) / nrow(db) * 100
db <- tools::CRAN_package_db()
sum(grepl("^r|r$", db[,1], ignore.case=TRUE)) / nrow(db) * 100
lapply(
LETTERS,
\(l) sum(grepl(paste0("^", l, "|", l  "$"), db[,1], ignore.case=TRUE)) / nrow(db) * 100
lapply(
LETTERS,
\(l) sum(grepl(paste0("^", l, "|", l, "$"), db[,1], ignore.case=TRUE)) / nrow(db) * 100
)
sapply(
LETTERS,
\(l) sum(grepl(paste0("^", l, "|", l, "$"), db[,1], ignore.case=TRUE)) / nrow(db) * 100
)
sapply(
LETTERS,
\(l) sum(grepl(paste0("^", l), db[,1], ignore.case=TRUE)) / nrow(db) * 100
)
sapply(
LETTERS,
\(l) sum(grepl(paste0(l, "$"), db[,1], ignore.case=TRUE)) / nrow(db) * 100
)
sapply(
LETTERS,
\(l) sum(grepl(paste0("^", l), db[,1], ignore.case=TRUE)) / nrow(db) * 100
) |>
sort()
sapply(
LETTERS,
\(l) sum(grepl(paste0(l, "$"), db[,1], ignore.case=TRUE)) / nrow(db) * 100
) |> sort()
sapply(
LETTERS,
\(l) sum(grepl(paste0(l, "$"), db[,1], ignore.case=TRUE)) / nrow(db) * 100
) |> sort()
db <- tools::CRAN_package_db()
sapply(
LETTERS,
\(l) sum(grepl(paste0(l, "$"), db[,1], ignore.case=TRUE)) / nrow(db) * 100
) |>
sort()
sapply(
LETTERS,
\(l) sum(grepl(paste0(l, "$"), db[,1], ignore.case=TRUE)) / nrow(db) * 100
) |>
sort(decreasing = TRUE)
db <- tools::CRAN_package_db()
letters <- sapply(
LETTERS,
\(l) sum(grepl(paste0(l, "$"), db[,1], ignore.case=TRUE)) / nrow(db) * 100
)
sort(letter, decreasing = TRUE)
sort(letters, decreasing = TRUE)
letters <- sapply(
LETTERS,
\(l) sum(grepl(paste0(l, "$"), db[,1], ignore.case=TRUE)) / nrow(db)
)
sort(letters, decreasing = TRUE)
