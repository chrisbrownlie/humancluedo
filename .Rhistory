?toggleState
?rows_update
lubridate::now()
?rows_insert
devtools::load_all(".")
l()
devtools::load_all(".")
l()
players <- DBI::dbReadTable(db_conn(), "players")
View(players)
contracts <- DBI::dbReadTable(db_conn(), "contracts")
View(contracts)
DBI::dbRemoveTable(db_conn(), "players")
DBI::dbRemoveTable(db_conn(), "games")
DBI::dbRemoveTable(db_conn(), "contracts")
create_database()
test_state <- GameState$new()
test_contracts <- tibble::tibble(
player = c("bob", "dave", "sandra"),
item = c("a spoon", "a ball", "a pair of trousers"),
location = c("in the kitchen", "by the pool", "behind the shed"),
target = c("sandra", "bob", "dave")
)
test_state$create_game(
test_contracts,
admin_player = "bob"
)
devtools::load_all(".")
l()
devtools::load_all(".")
clean_game()
devtools::load_all(".")
clean_game()
devtools::load_all(".")
devtools::load_all(".")
l()
length(game_state$active_player_name) == 0
players <- collect(game_state$players)
devtools::load_all(".")
l()
clean_game()
devtools::load_all(".")
l()
devtools::load_all(".")
clean_game()
l()
devtools::load_all(".")
l()
clean_game()
devtools::load_all(".")
l()
session$token
cookies::get_cookie("player_id")
game_state$players
game_state$active_player
game_state$set_player(session$token)
game_state$active_player
game_state$players
DBI::dbExecute(
game_state$conn,
glue::glue_sql(
"
UPDATE players
SET identifier = {session$token}
WHERE player = {input$selected_player}
AND game_id = {game_state$active_game}
",
.con = game_state$conn
)
)
# Refresh tables
game_state$initialise_game(game_state$active_game)
game_state$players
game_state$active_player
game_state$get_target()
game_state$contracts
game_state$active_player_name
devtools::load_all(".")
l()
clean_game()
devtools::load_all(".")
l()
# Mark player as dead
DBI::dbExecute(
self$conn,
glue::glue_sql(
"
UPDATE players
SET alive = {FALSE}
WHERE player = {self$get_target()}
AND game_id = {self$active_game}
",
.con = self$conn
)
)
cli::cli_alert_success("Player {self$get_target()} identified as dead")
self$get_target()
self$get_target()
# Mark contract as complete
DBI::dbExecute(
self$conn,
glue::glue_sql(
"
UPDATE contracts
SET active = {FALSE}, execution_time = {lubridate::now()}, execution_notes = {notes}
WHERE target = {self$get_target()}
AND game_id = {self$active_game}
",
.con = self$conn
)
)
cli::cli_alert_success("Contract on {self$get_target()} identified as complete")
self$get_target()
self$contracts
self$players
# Add new contract
target_contract <- self$contracts |>
filter(player == self$get_target(),
active)
target_contract
devtools::load_all(".")
l()
clean_game()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
clean_game()
devtools::load_all(".")
l()
if (NROW(target_contract) != 1) cli::cli_abort("Something went wrong adding new contract")
devtools::load_all(".")
l()
p <- DBI::dbReadTable(db_conn(), "players")
c <- DBI::dbReadTable(db_conn(), "contracts")
View(contracts)
devtools::load_all(".")
clean_game()
l()
NROW(target_contract)
target_contract
self$contracts
target
self$contracts |>
filter(player == target,
active)
self$contracts
self$contracts |>
filter(player == .env$target,
active)
# Get target's contract
target_contract <- self$contracts |>
filter(player == .env$target,
active)
NROW(target_contract)
nrow(target_contract)
duckdb::dbGetRowCount(target_contract)
duckplyr::count(target_contract)
duckplyr::count(target_contract)$n
pull(duckplyr::count(target_contract))
pull(count(target_contract))
pull(target_contract, target)
self$active_player_name
clean_game()
devtools::load_all(".")
l()
clean_game()
devtools::load_all(".")
clean_game()
devtools::load_all(".")
l()
?write_clip
clipr::write_clip("This")
clipr::write_clip(test_state$active_game)
clipr::write_clip(test_state$active_game, return_new = TRUE)
clipr::write_clip(cat(test_state$active_game))
test_state$active_game
new <- GameState$new()
test_contracts <- tibble::tibble(
player = c("bob", "dave", "sandra"),
item = c("a spoon", "a ball", "a pair of trousers"),
location = c("in the kitchen", "by the pool", "behind the shed"),
target = c("sandra", "bob", "dave")
)
new$create_game(
test_contracts,
admin_player = "bob"
)
new$active_game
devtools::load_all(".")
clean_game()
devtools::load_all(".")
l()
?insertUI
format(lubridate::now())
format(lubridate::now(), "%Z")
format(lubridate::now(), "%z")
format(lubridate::now(), "%r")
format(lubridate::now(), "%R")
?format.Date
?strptime
format(lubridate::now(), "%D")
format(lubridate::now() "%d-%m-%Y")
format(lubridate::now(), "%d-%m-%Y")
devtools::load_all(".")
devtools::load_all(".")
l()
devtools::load_all(".")
l()
pull(count(kills))
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
clean_game()
devtools::load_all(".")
l9
l()
devtools::load_all(".")
l()
clean_game()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
clean_game()
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
html <- tagList(
p(
"You are",
tags$b(ifelse(is_alive, "ALIVE", "DEAD"))
),
p(
"You",
ifelse(is_alive, "have", "had"),
tags$b(NROW(kills), "successful kills")
),
if (NROW(kills)) {
tags$ul(
purrr::pmap(kills,
\(...) {
kill <- list(...)
tags$li(
"Killed", tags$b(kill$target), "with", tags$b(kill$item), "-", tags$b(kill$location), " at ",
format(kill$execution_time, "%R"), "on", format(kill$execution_time, "%d-%m-%Y")
)
})
)
}
)
html
kills
self$active_player_name
devtools::load_all(".")
l()
clean_game()
l()
?card_title
devtools::load_all(".")
l()
?page_fillable
devtools::load_all(".")
l()
devtools::load_all(".")
l()
?hide
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::check()
devtools::load_all(".")
devtools::check()
usethis::use_package("purrr")
usethis::use_package("duckplyr")
usethis::use_package("DBI")
usethis::use_package("bsicons")
usethis::use_package("shinyjs")
usethis::use_package("R6")
usethis::use_package("cookies")
usethis::use_package("cli")
usethis::use_package("shinyalert")
usethis::use_package("stringr")
usethis::use_package("tibble")
pkg_file("inst", "hc-db.duckdb")
pkg_file("inst", "hcss-db.duckdb")
fs::file_exists(pkg_file("inst", "hc-db.duckdb"))
fs::file_exists(pkg_file("inst", "hcs-db.duckdb"))
purrr::possibly(pkg_file("inst", "hc-db.duckdb"), otherwise = "")
length(fs::path())
pkg_file("Inst")
devtools::load_all(".")
pkg_file("Inst")
pkg_file("inst")
pkg_file("app")
pkg_file("hc-db.duckdb")
devtools::check()
usethis::use_package("duckdb")
usethis::use_package("clipr")
usethis::use_package("fs")
usethis::use_package("glue")
usethis::use_package("lubridate")
usethis::use_mit_license()
renv::status()
renv::snapshot()
install.packages("dockerfiler")
?dock_from_renv
dockerfiler::dock_from_renv(repos = c(CRAN = "https://packagemanager.posit.co/cran/__linux__/focal/latest"), use_pak = TRUE)
d <- dockerfiler::dock_from_renv(repos = c(CRAN = "https://packagemanager.posit.co/cran/__linux__/focal/latest"), use_pak = TRUE)
d$write("Dockerfile2")
?arg_match
c("chris", "dan", "jack") -> players
players |>
as_duckplyr_tibble()
devtools::load_all(".")
players |>
as_duckplyr_tibble()
?as_duckplyr_tibble
players |>
as_duckplyr_tibble() |>
rename(1 = player) |>
players |>
as_duckplyr_tibble() |>
rename(1 = player)
players |>
as_duckplyr_tibble() |>
rename(1 = "player")
?rename()
players |>
as_duckplyr_tibble() |>
rename(player = 1) |>
mutate(game_id = new_game_id,
alive = TRUE,
is_admin = .data$player == .env$players[1])
new_game_id <- "test"
players |>
as_duckplyr_tibble() |>
rename(player = 1) |>
mutate(game_id = new_game_id,
alive = TRUE,
is_admin = .data$player == .env$players[1])
?filter
?glue_sql
devtools::load_all(".")
devtools::load_all(".")
test <- GameState$new()
test$create_game(c("chris", "dan", "jack"))
create_database()
test$create_game(c("chris", "dan", "jack"))
test <- GameState$new()
test$create_game(c("chris", "dan", "jack"))
create_database()
DBI::dbConnect(duckdb::duckdb(),
dbdir = pkg_file("hc-db.duckdb"))
devtools::load_all(".")
DBI::dbConnect(duckdb::duckdb(),
dbdir = pkg_file("hc-db.duckdb"))
pkg_file("hc-db.duckdb")
fs::path_package
find.package("humancluedo")
find.package("humancluedo") |> fs::as_fs_path()
devtools::load_all(".")
pkg_file("testing")
devtools::document()
create_database()
create_database()
db_conn()
tbl(db_conn(), "items")
dplyr::tbl(db_conn(), "items")
test <- GameState$new()
test$create_game(c("chris", "dan", "jack"))
devtools::load_all(".")
test <- GameState$new()
devtools::load_all(".")
create_database()
dplyr::tbl(db_conn(), "games")
duckdb::dbRemoveTable(db_conn(), "games")
duckdb::dbRemoveTable(db_conn(), "items")
duckdb::dbRemoveTable(db_conn(), "contracts")
duckdb::dbRemoveTable(db_conn(), "locations")
duckdb::dbRemoveTable(db_conn(), "players")
create_database()
dplyr::tbl(db_conn(), "games")
devtools::load_all(".")
test$create_game(c("chris", "dan", "jack"))
test$items
test$add_item("spoon")
test$is_initialised()
devtools::load_all(".")
test <- GameState$new()
test$initialise_game("82278745-eecb-4ced-9393-2a99474de907")
test$items
test$add_item("spoon")
test$add_location("in the kitchen")
test$add_location("in the kitchen", "auto")
test$locations
devtools::load_all(".")
test <- GameState$new()
test$initialise_game("82278745-eecb-4ced-9393-2a99474de907")
test$add_item("spoon", "auto")
test$add_item("ball", "auto")
test$add_item("paper", "auto")
test$add_location("in the office", "auto")
test$add_location("in the garden", "auto")
test$items
test$set_contracts()
test$players
test$players |> pull(player)
test$players |> pull(player) |> class()
devtools::load_all(".")
test <- GameState$new()
test$initialise_game("82278745-eecb-4ced-9393-2a99474de907")
test$items
test$set_contracts()
test$contracts
test$contracts
test$players
devtools::load_all(".")
test <- GameState$new()
test$initialise_game("82278745-eecb-4ced-9393-2a99474de907")
test$contracts
test$set_contracts()
test$contracts
test$players
test$locations
test$add_location("something", "auto")
test$locations
test$contracts
devtools::load_all(".")
test <- GameState$new()
test$initialise_game("82278745-eecb-4ced-9393-2a99474de907")
test$locations
test$remove_location("something")
devtools::load_all(".")
test <- GameState$new()
test$initialise_game("82278745-eecb-4ced-9393-2a99474de907")
test$locations
test$remove_location("something")
test$locations
test$set_contracts()
test$contracts
devtools::load_all(".")
test <- GameState$new()
test$initialise_game("82278745-eecb-4ced-9393-2a99474de907")
test$contracts
test$set_contracts()
contracts <- tibble::tibble(
player = players,
item = items,
location = locations,
target = targets
)
contracts
contracts |>
mutate(game_id = new_game_id,
active = TRUE)
self$contracts
contracts |>
mutate(game_id = new_game_id,
active = TRUE) |>
duckdb::dbAppendTable(conn = self$conn,
name = "contracts",
value = _)
self$contracts
tbl(self$conn, "contracts")
dplyr::tbl(self$conn, "contracts")
rm(new_game_id)
duckdb::dbRemoveTable(db_conn(), "contracts")
create_database()
devtools::load_all(".")
test <- GameState$new()
test$initialise_game("82278745-eecb-4ced-9393-2a99474de907")
test$players
test$items
test$contracts
test$set_contracts()
test$contracts
test$active_player
test$set_player("chris")
test$get_location()
test$active_player
test$active_player_name
test$players
test$details
test$contracts
test$set_contracts()
test$contracts
test$contracts |> NROW()
test$contracts |> duckplyr::count()
test$contracts |> duckplyr::count() |> pull(n)
count(test$contracts)
tally(test$contracts)
?tally
tally(test$contracts)$n
devtools::load_all(".")
test <- GameState$new()
test$initialise_game("82278745-eecb-4ced-9393-2a99474de907")
test$contracts
test$set_contracts()
test$contracts
test$confirm_kill()
