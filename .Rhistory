l()
devtools::load_all(".")
l()
clean_game()
devtools::load_all(".")
l9
l()
devtools::load_all(".")
l()
clean_game()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
clean_game()
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
html <- tagList(
p(
"You are",
tags$b(ifelse(is_alive, "ALIVE", "DEAD"))
),
p(
"You",
ifelse(is_alive, "have", "had"),
tags$b(NROW(kills), "successful kills")
),
if (NROW(kills)) {
tags$ul(
purrr::pmap(kills,
\(...) {
kill <- list(...)
tags$li(
"Killed", tags$b(kill$target), "with", tags$b(kill$item), "-", tags$b(kill$location), " at ",
format(kill$execution_time, "%R"), "on", format(kill$execution_time, "%d-%m-%Y")
)
})
)
}
)
html
kills
self$active_player_name
devtools::load_all(".")
l()
clean_game()
l()
?card_title
devtools::load_all(".")
l()
?page_fillable
devtools::load_all(".")
l()
devtools::load_all(".")
l()
?hide
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::check()
devtools::load_all(".")
devtools::check()
usethis::use_package("purrr")
usethis::use_package("duckplyr")
usethis::use_package("DBI")
usethis::use_package("bsicons")
usethis::use_package("shinyjs")
usethis::use_package("R6")
usethis::use_package("cookies")
usethis::use_package("cli")
usethis::use_package("shinyalert")
usethis::use_package("stringr")
usethis::use_package("tibble")
pkg_file("inst", "hc-db.duckdb")
pkg_file("inst", "hcss-db.duckdb")
fs::file_exists(pkg_file("inst", "hc-db.duckdb"))
fs::file_exists(pkg_file("inst", "hcs-db.duckdb"))
purrr::possibly(pkg_file("inst", "hc-db.duckdb"), otherwise = "")
length(fs::path())
pkg_file("Inst")
devtools::load_all(".")
pkg_file("Inst")
pkg_file("inst")
pkg_file("app")
pkg_file("hc-db.duckdb")
devtools::check()
usethis::use_package("duckdb")
usethis::use_package("clipr")
usethis::use_package("fs")
usethis::use_package("glue")
usethis::use_package("lubridate")
usethis::use_mit_license()
renv::status()
renv::snapshot()
install.packages("dockerfiler")
?dock_from_renv
dockerfiler::dock_from_renv(repos = c(CRAN = "https://packagemanager.posit.co/cran/__linux__/focal/latest"), use_pak = TRUE)
d <- dockerfiler::dock_from_renv(repos = c(CRAN = "https://packagemanager.posit.co/cran/__linux__/focal/latest"), use_pak = TRUE)
d$write("Dockerfile2")
?arg_match
c("chris", "dan", "jack") -> players
players |>
as_duckplyr_tibble()
devtools::load_all(".")
players |>
as_duckplyr_tibble()
?as_duckplyr_tibble
players |>
as_duckplyr_tibble() |>
rename(1 = player) |>
players |>
as_duckplyr_tibble() |>
rename(1 = player)
players |>
as_duckplyr_tibble() |>
rename(1 = "player")
?rename()
players |>
as_duckplyr_tibble() |>
rename(player = 1) |>
mutate(game_id = new_game_id,
alive = TRUE,
is_admin = .data$player == .env$players[1])
new_game_id <- "test"
players |>
as_duckplyr_tibble() |>
rename(player = 1) |>
mutate(game_id = new_game_id,
alive = TRUE,
is_admin = .data$player == .env$players[1])
?filter
?glue_sql
devtools::load_all(".")
devtools::load_all(".")
test <- GameState$new()
test$create_game(c("chris", "dan", "jack"))
create_database()
test$create_game(c("chris", "dan", "jack"))
test <- GameState$new()
test$create_game(c("chris", "dan", "jack"))
create_database()
DBI::dbConnect(duckdb::duckdb(),
dbdir = pkg_file("hc-db.duckdb"))
devtools::load_all(".")
DBI::dbConnect(duckdb::duckdb(),
dbdir = pkg_file("hc-db.duckdb"))
pkg_file("hc-db.duckdb")
fs::path_package
find.package("humancluedo")
find.package("humancluedo") |> fs::as_fs_path()
devtools::load_all(".")
pkg_file("testing")
devtools::document()
create_database()
create_database()
db_conn()
tbl(db_conn(), "items")
dplyr::tbl(db_conn(), "items")
test <- GameState$new()
test$create_game(c("chris", "dan", "jack"))
devtools::load_all(".")
test <- GameState$new()
devtools::load_all(".")
create_database()
dplyr::tbl(db_conn(), "games")
duckdb::dbRemoveTable(db_conn(), "games")
duckdb::dbRemoveTable(db_conn(), "items")
duckdb::dbRemoveTable(db_conn(), "contracts")
duckdb::dbRemoveTable(db_conn(), "locations")
duckdb::dbRemoveTable(db_conn(), "players")
create_database()
dplyr::tbl(db_conn(), "games")
devtools::load_all(".")
test$create_game(c("chris", "dan", "jack"))
test$items
test$add_item("spoon")
test$is_initialised()
devtools::load_all(".")
test <- GameState$new()
test$initialise_game("82278745-eecb-4ced-9393-2a99474de907")
test$items
test$add_item("spoon")
test$add_location("in the kitchen")
test$add_location("in the kitchen", "auto")
test$locations
devtools::load_all(".")
test <- GameState$new()
test$initialise_game("82278745-eecb-4ced-9393-2a99474de907")
test$add_item("spoon", "auto")
test$add_item("ball", "auto")
test$add_item("paper", "auto")
test$add_location("in the office", "auto")
test$add_location("in the garden", "auto")
test$items
test$set_contracts()
test$players
test$players |> pull(player)
test$players |> pull(player) |> class()
devtools::load_all(".")
test <- GameState$new()
test$initialise_game("82278745-eecb-4ced-9393-2a99474de907")
test$items
test$set_contracts()
test$contracts
test$contracts
test$players
devtools::load_all(".")
test <- GameState$new()
test$initialise_game("82278745-eecb-4ced-9393-2a99474de907")
test$contracts
test$set_contracts()
test$contracts
test$players
test$locations
test$add_location("something", "auto")
test$locations
test$contracts
devtools::load_all(".")
test <- GameState$new()
test$initialise_game("82278745-eecb-4ced-9393-2a99474de907")
test$locations
test$remove_location("something")
devtools::load_all(".")
test <- GameState$new()
test$initialise_game("82278745-eecb-4ced-9393-2a99474de907")
test$locations
test$remove_location("something")
test$locations
test$set_contracts()
test$contracts
devtools::load_all(".")
test <- GameState$new()
test$initialise_game("82278745-eecb-4ced-9393-2a99474de907")
test$contracts
test$set_contracts()
contracts <- tibble::tibble(
player = players,
item = items,
location = locations,
target = targets
)
contracts
contracts |>
mutate(game_id = new_game_id,
active = TRUE)
self$contracts
contracts |>
mutate(game_id = new_game_id,
active = TRUE) |>
duckdb::dbAppendTable(conn = self$conn,
name = "contracts",
value = _)
self$contracts
tbl(self$conn, "contracts")
dplyr::tbl(self$conn, "contracts")
rm(new_game_id)
duckdb::dbRemoveTable(db_conn(), "contracts")
create_database()
devtools::load_all(".")
test <- GameState$new()
test$initialise_game("82278745-eecb-4ced-9393-2a99474de907")
test$players
test$items
test$contracts
test$set_contracts()
test$contracts
test$active_player
test$set_player("chris")
test$get_location()
test$active_player
test$active_player_name
test$players
test$details
test$contracts
test$set_contracts()
test$contracts
test$contracts |> NROW()
test$contracts |> duckplyr::count()
test$contracts |> duckplyr::count() |> pull(n)
count(test$contracts)
tally(test$contracts)
?tally
tally(test$contracts)$n
devtools::load_all(".")
test <- GameState$new()
test$initialise_game("82278745-eecb-4ced-9393-2a99474de907")
test$contracts
test$set_contracts()
test$contracts
test$confirm_kill()
?radioButtons
??radioButtons
?toggle
sample(c("this", "that"), 10)
sample(c("this", "that"), 10, replace = TRUE)
sample(LETTERS, 3, replace = TRUE)
sample(LETTERS, 3, replace = TRUE)
sample(LETTERS, 3, replace = TRUE)
sample(LETTERS, 3, replace = TRUE)
sample(LETTERS, 3, replace = TRUE)
sample(LETTERS, 3, replace = TRUE)
sample(LETTERS, 3, replace = TRUE)
sample(LETTERS[1:4], 3, replace = TRUE)
sample(LETTERS[1:4], 3, replace = TRUE)
sample(LETTERS[1:4], 3, replace = TRUE)
sample(LETTERS[1:4], 3, replace = TRUE)
pkg_file("hc-db.duckdb")
devtools::load_all(".")
devtools::load_all(".")
pkg_file("hc-db.duckdb")
devtools::load_all(".")
l()
devtools::load_all(".")
l()
pkg_file("hc-db.duckdb")
create_database()
db_conn()
devtools::load_all(".")
db_conn()
fs::file_create("inst/hc-db.duckdb")
db_conn()
devtools::load_all(".")
db_conn()
devtools::load_all(".")
db_conn()
devtools::load_all(".")
l()
?req
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
duckplyr::fallback_review()
duckplyr::fallback_sitrep()
devtools::load_all(".")
l()
devtools::load_all(".")
l9
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
?insertUI
devtools::load_all(".")
l()
dplyr::tbl(db_conn(), "games") -> games
duckdb::dbListTables(db_conn())
?duckdb::dbConnect
??duckdb::dbConnect()
duckdb::dbConnect()
duckdb::dbConnec
duckdb::dbConnect
?dbConnect
system.file("hc-db.duckdb", package = "humancluedo")
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
dplyr::tbl(db_conn(), "players") -> ps
dplyr::tbl(db_conn(), "games") -> ps
db_conn()
devtools::load_all(".")
l()
tags$ul(
lapply(
seq_along(players$player),
\(i) {
tags$li(
players$player[i], ifelse(is.na(players$id[i]), "(yet to join)", "(joined)"),
class = ifelse(is.na(players$id[i]), "text-red", "text-green")
)
}
)
)
players$identifier
lapply(
seq_along(players$player),
\(i) {
tags$li(
players$player[i], if_else(is.na(players$identifier[i]), "(yet to join)", "(joined)"),
class = if_else(is.na(players$identifier[i]), "text-red", "text-green")
)
}
)
lapply(
seq_along(players$player),
\(i) {
tags$li(
paste(players$player[i], if_else(is.na(players$identifier[i]), "(yet to join)", "(joined)")),
class = if_else(is.na(players$identifier[i]), "text-red", "text-green")
)
}
)
NROW(iris) |> as.logical
NROW(iris) |> as.logical()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
game_state
game_state$active_player
game_state$active_player_name
game_state$active_game_name
game_state$players
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
dplyr::tbl(db_conn(), "contracts") -> cc
cc
test <- GameState$new(game_id = "04951be3-f9ff-4b70-85fc-4c3e7909dafe")
test$contracts
test$set_contracts()
test$contracts
test$items
test$locations
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
dplyr::tbl(db_conn(), "players") -> ptf
ptf
collect(ptf) -> ptfc
View(ptfc)
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::load_all(".")
l()
players$player[players$identifier != state$active_player]
players
players$player
state$active_player
players$identifier
purrr::map2(
players$player[players$player != state$active_player_name],
players$identifier[players$player != state$active_player_name],
\(name, id) {
tags$li(
p(name, if_else(is.na(id), "(yet to join)", "(joined)")),
class = if_else(is.na(id), "text-red", "text-green")
)
}
)
devtools::load_all(".")
l()
devtools::load_all(".")
l()
devtools::document()
devtools::document()
devtools::load_all(".")
devtools::document()
devtools::load_all(".")
devtools::document()
devtools::check()
devtools::load_all(".")
l()
